console.log('twofish.js loaded');

function Twofish() {
  this.sbox = new Array(4);
  for (let i = 0; i < 4; i++) this.sbox[i] = new Uint32Array(256);
  this.subKeys = new Uint32Array(40);
  this.k = [];
}

window.Twofish = Twofish;

Twofish.prototype = {
  init: function(key) {
    try {
      if (!(key instanceof Uint8Array)) throw new TypeError('Key must be Uint8Array');
      if (key.length !== 32) throw new Error('Key must be 32 bytes for Twofish-256');

      const k = new Array(8);
      for (let i = 0; i < 8; i++) {
        k[i] = (key[i * 4] | (key[i * 4 + 1] << 8) | (key[i * 4 + 2] << 16) | (key[i * 4 + 3] << 24)) >>> 0;
      }
      this.k = k;

      const s = this._generateSBox();
      for (let i = 0; i < 4; i++) {
        for (let j = 0; j < 256; j++) {
          this.sbox[i][j] = this._mdsColumnMult(s[i][j], i);
        }
      }

      let me = new Uint32Array(4), mo = new Uint32Array(4);
      for (let i = 0; i < 40; i += 2) {
        for (let j = 0; j < 4; j++) {
          me[j] = (i + j * 2) & 0xff;
          mo[j] = (i + j * 2 + 1) & 0xff;
        }
        let a = this._h(me, k, 0);
        let b = this._h(mo, k, 1);
        this.subKeys[i] = (a + b) >>> 0;
        this.subKeys[i + 1] = rotl32((a + 2 * b) >>> 0, 9);
      }
    } catch (error) {
      console.error('Twofish.init error:', error);
      throw error;
    }
  },

  _generateSBox: function() {
    try {
      const s = new Array(4);
      for (let i = 0; i < 4; i++) s[i] = new Uint8Array(256);
      const q0 = [0xa9,0x67,0xb3,0xe8,0x04,0xfd,0xa3,0x76,0x9a,0x92,0x80,0x78,0xe4,0xdd,0xd1,0x38,0x0d,0xc6,0x35,0x98,0x18,0xf7,0xec,0x6c,0x43,0x75,0x37,0x26,0xfa,0x13,0x94,0x48,0xf2,0xd0,0x8b,0x30,0x84,0x54,0xdf,0x23,0x19,0x5b,0x3d,0x59,0xf3,0xae,0xa2,0x82,0x63,0x01,0x83,0x2e,0xd9,0x51,0x9b,0x7c,0xa6,0xeb,0xa5,0xbe,0x16,0x0c,0xe3,0x61,0xc0,0x8c,0x3a,0xf5,0x73,0x2c,0x25,0x0b,0xbb,0x4e,0x89,0x6b,0x53,0x6a,0xb4,0xf1,0xe1,0xe6,0xbd,0x45,0xe2,0xf4,0xb6,0x66,0xcc,0x95,0x03,0x56,0xd4,0x1c,0x1e,0xd7,0xfb,0xc3,0x8e,0xb5,0xe9,0xcf,0xbf,0xba,0xea,0x77,0x39,0xaf,0x33,0xc9,0x62,0x71,0x81,0x79,0x09,0xad,0x24,0xcd,0xf9,0xd8,0xe5,0xc5,0xb9,0x4d,0x44,0x08,0x86,0xe7,0xa1,0x1d,0xaa,0xed,0x06,0x70,0xb2,0xd2,0x41,0x7b,0xa0,0x11,0x31,0xc2,0x27,0x90,0x20,0xf6,0x60,0xff,0x96,0x5c,0xb1,0xab,0x9e,0x9c,0x52,0x1b,0x5f,0x93,0x0a,0xef,0x91,0x85,0x49,0xee,0x2d,0x4f,0x8f,0x3b,0x47,0x87,0x6d,0x46,0xd6,0x3e,0x69,0x64,0x2a,0xce,0xcb,0x2f,0xfc,0x97,0x05,0x7a,0xac,0x7f,0xd5,0x1a,0x4b,0x0e,0xa7,0x5a,0x28,0x14,0x3f,0x29,0x88,0x3c,0x4c,0x02,0xb8,0xda,0xb0,0x17,0x55,0x1f,0x8a,0x7d,0x57,0xc7,0x8d,0x74,0xb7,0xc4,0x9f,0x72,0x7e,0x15,0x22,0x12,0x58,0x07,0x99,0x34,0x6e,0x50,0xde,0x68,0x65,0xbc,0xdb,0xf8,0xc8,0xa8,0x2b,0x40,0xdc,0xfe,0x32,0xa4,0xca,0x10,0x21,0xf0,0xd3,0x5d,0x0f,0x00,0x6f,0x9d,0x36,0x42,0x4a,0x5e,0xc1,0xe0];
      const q1 = [0x75,0xf3,0xc6,0xf4,0xdb,0x7b,0xfb,0xc8,0x4a,0xd3,0xe6,0x6b,0x45,0x7d,0xe8,0x4b,0xd6,0x32,0xd8,0xfd,0x37,0xf9,0xeb,0x35,0x81,0x18,0x2e,0x1e,0x17,0x1d,0x92,0x73,0x2b,0x5a,0x54,0x5c,0x9a,0x3e,0x9f,0x50,0xb1,0x2d,0x44,0x72,0x63,0x9e,0x43,0x0c,0x19,0x7e,0x31,0x29,0x20,0x68,0x85,0x12,0x5f,0x9d,0x94,0x1c,0x5e,0x36,0x1a,0x4f,0x16,0x70,0x00,0x83,0x1b,0x60,0x4d,0x74,0x04,0x97,0x7f,0x82,0xa0,0x8d,0x05,0x4e,0x26,0x38,0x8b,0x66,0x99,0x15,0x40,0x98,0xcc,0x91,0xa1,0x0d,0x41,0x55,0xa4,0x5b,0x90,0x03,0x8a,0x56,0x47,0x69,0x62,0xc2,0x0a,0x8c,0xe4,0x88,0x2a,0x77,0x53,0xaa,0x23,0x71,0x6e,0x7c,0x8f,0x13,0x02,0xf1,0x3b,0x39,0x6c,0x3d,0x9b,0x89,0xe2,0xb5,0xc5,0x6a,0x21,0x95,0x64,0x07,0x76,0x80,0xe1,0xb6,0x25,0x3f,0x96,0xf5,0x33,0x65,0x78,0x7a,0xe3,0xb2,0x27,0x67,0x85,0x58,0xe5,0x30,0x49,0x0b,0x51,0x4c,0x5d,0xe7,0x01,0x79,0x46,0x10,0x1f,0x22,0x52,0x59,0x61,0xe0,0x48,0x24,0x28,0x2c,0x34,0x93,0xa2,0x3c,0x87,0x08,0x0e,0x06,0x11,0x42,0x14,0xb3,0x86,0x2f,0xe9,0xb7,0x84,0x0f,0xb4,0x75,0x09,0xa7,0x6f,0x57,0xb9,0x8e,0x9c,0xa9,0x86,0xc1,0x6d,0xde,0xdf,0xc0,0xd0,0xd1,0xd2,0xd4,0xd5,0xd7,0xd9,0xda,0xdc,0xdd,0xe0,0xe1,0xe2,0xe3,0xe5,0xe6,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf0,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff];
      let l0 = new Uint8Array(256), l1 = new Uint8Array(256);
      for (let i = 0; i < 256; i++) {
        l0[i] = q0[i];
        l1[i] = q1[i];
      }
      for (let i = 0; i < 4; i++) {
        for (let j = 0; j < 256; j++) {
          let x = this.k[2 * i] >>> (8 * (j % 4));
          x = (x & 0xff) ^ l0[j];
          s[i][j] = l1[x];
        }
        l0.set(s[i]);
      }
      return s;
    } catch (error) {
      console.error('Twofish._generateSBox error:', error);
      throw error;
    }
  },

  _h: function(x, k, odd) {
    try {
      let y = new Uint32Array(4);
      for (let i = 0; i < 4; i++) y[i] = x[i];
      for (let i = k.length / 2 - 1; i >= 0; i--) {
        let m = k[2 * i + odd];
        let l = k[2 * i + (odd ^ 1)];
        for (let j = 0; j < 4; j++) {
          let z = (m >>> (8 * j)) & 0xff;
          y[j] ^= (l >>> (8 * j)) & 0xff;
          y[j] = (y[j] + z) & 0xff;
          y[j] = (y[j] * 0x01010101) & 0xffffffff;
        }
      }
      let result = 0;
      for (let i = 0; i < 4; i++) {
        result ^= this.sbox[i][y[i] & 0xff];
      }
      return result;
    } catch (error) {
      console.error('Twofish._h error:', error);
      throw error;
    }
  },

  _mdsColumnMult: function(x, col) {
    try {
      const mds = [
        [0x01, 0xef, 0x5b, 0x5b],
        [0x5b, 0xef, 0xef, 0x01],
        [0xef, 0x5b, 0x01, 0xef],
        [0xef, 0x01, 0xef, 0x5b]
      ];
      let result = 0;
      for (let i = 0; i < 4; i++) {
        let prod = 0;
        for (let v = x; v > 0; v >>>= 1) {
          if (v & 1) prod ^= mds[col][i];
          v >>>= 1;
        }
        result |= prod << (8 * i);
      }
      return result >>> 0;
    } catch (error) {
      console.error('Twofish._mdsColumnMult error:', error);
      throw error;
    }
  },

  encrypt: function(data) {
    try {
      if (!(data instanceof Uint8Array) || data.length % 16 !== 0) throw new Error('Data must be Uint8Array with length multiple of 16');
      const result = new Uint8Array(data.length);
      for (let i = 0; i < data.length; i += 16) {
        let x = new Uint32Array(4);
        for (let j = 0; j < 4; j++) {
          x[j] = (data[i + j * 4] | (data[i + j * 4 + 1] << 8) | (data[i + j * 4 + 2] << 16) | (data[i + j * 4 + 3] << 24)) >>> 0;
        }
        x[0] ^= this.subKeys[0];
        x[1] ^= this.subKeys[1];
        x[2] ^= this.subKeys[2];
        x[3] ^= this.subKeys[3];
        for (let r = 0; r < 16; r += 2) {
          let t0 = this._h([x[0]], this.k, 0);
          let t1 = this._h([x[1]], this.k, 1);
          x[2] = rotl32(x[2] ^ (t0 + t1 + this.subKeys[8 + r]) >>> 0, 1);
          x[3] = rotr32(x[3], 1) ^ (t0 + 2 * t1 + this.subKeys[9 + r]) >>> 0;
          t0 = this._h([x[2]], this.k, 0);
          t1 = this._h([x[3]], this.k, 1);
          x[0] = rotl32(x[0] ^ (t0 + t1 + this.subKeys[10 + r]) >>> 0, 1);
          x[1] = rotr32(x[1], 1) ^ (t0 + 2 * t1 + this.subKeys[11 + r]) >>> 0;
        }
        x[2] ^= this.subKeys[4];
        x[3] ^= this.subKeys[5];
        x[0] ^= this.subKeys[6];
        x[1] ^= this.subKeys[7];
        for (let j = 0; j < 4; j++) {
          result[i + j * 4] = x[j] & 0xff;
          result[i + j * 4 + 1] = (x[j] >>> 8) & 0xff;
          result[i + j * 4 + 2] = (x[j] >>> 16) & 0xff;
          result[i + j * 4 + 3] = (x[j] >>> 24) & 0xff;
        }
      }
      return result;
    } catch (error) {
      console.error('Twofish.encrypt error:', error);
      throw error;
    }
  },

  decrypt: function(data) {
    try {
      if (!(data instanceof Uint8Array) || data.length % 16 !== 0) throw new Error('Data must be Uint8Array with length multiple of 16');
      const result = new Uint8Array(data.length);
      for (let i = 0; i < data.length; i += 16) {
        let x = new Uint32Array(4);
        for (let j = 0; j < 4; j++) {
          x[j] = (data[i + j * 4] | (data[i + j * 4 + 1] << 8) | (data[i + j * 4 + 2] << 16) | (data[i + j * 4 + 3] << 24)) >>> 0;
        }
        x[2] ^= this.subKeys[4];
        x[3] ^= this.subKeys[5];
        x[0] ^= this.subKeys[6];
        x[1] ^= this.subKeys[7];
        for (let r = 14; r >= 0; r -= 2) {
          let t0 = this._h([x[2]], this.k, 0);
          let t1 = this._h([x[3]], this.k, 1);
          x[0] = rotr32(x[0], 1) ^ (t0 + t1 + this.subKeys[10 + r]) >>> 0;
          x[1] = rotl32(x[1] ^ (t0 + 2 * t1 + this.subKeys[11 + r]) >>> 0, 1);
          t0 = this._h([x[0]], this.k, 0);
          t1 = this._h([x[1]], this.k, 1);
          x[2] = rotr32(x[2], 1) ^ (t0 + t1 + this.subKeys[8 + r]) >>> 0;
          x[3] = rotl32(x[3] ^ (t0 + 2 * t1 + this.subKeys[9 + r]) >>> 0, 1);
        }
        x[0] ^= this.subKeys[0];
        x[1] ^= this.subKeys[1];
        x[2] ^= this.subKeys[2];
        x[3] ^= this.subKeys[3];
        for (let j = 0; j < 4; j++) {
          result[i + j * 4] = x[j] & 0xff;
          result[i + j * 4 + 1] = (x[j] >>> 8) & 0xff;
          result[i + j * 4 + 2] = (x[j] >>> 16) & 0xff;
          result[i + j * 4 + 3] = (x[j] >>> 24) & 0xff;
        }
      }
      return result;
    } catch (error) {
      console.error('Twofish.decrypt error:', error);
      throw error;
    }
  }
};

function rotl32(x, n) {
  return ((x << n) | (x >>> (32 - n))) >>> 0;
}

function rotr32(x, n) {
  return ((x >>> n) | (x << (32 - n))) >>> 0;
}
